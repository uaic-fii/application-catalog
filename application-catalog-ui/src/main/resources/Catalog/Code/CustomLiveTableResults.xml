<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Catalog.Code.CustomLiveTableResults" locale="">
  <web>Catalog.Code</web>
  <name>CustomLiveTableResults</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Catalog.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="XWiki.LiveTableResultsMacros" /}}

{{include reference="Catalog.Code.CatalogMacros" /}}

{{velocity wiki="false"}}
## the $extra variable is passed to the call to #gridresultwithfilter below and is used to perform some default
## filtering on the LiveTable data even when the user has not performed any column filtering yet.
## When users start using column filtering, the generated DB query will combine both the default filtering and what the
## user has entered in the column filters.
#set ($EXCEL = 'excel')
#set ($CSV = 'csv')
#if(!$hasEdit)
  #set($userDocName = $xwiki.getDocument($xcontext.user).name)
  #set($query = ", BaseObject as obj, StringProperty as prop where doc.fullName = obj.name and obj.className = 'Catalog.Code.Student_Class' and obj.id=prop.id.id and prop.id.name='email' and REPLACE(SUBSTRING(TRIM(prop.value), 1, LOCATE('@', TRIM(prop.value))-1),'.','') = TRIM('$userDocName')")
  #set($corespondingStudent = $services.query.hql($query).execute())
  #set($crtstud = $xwiki.getDocument("$corespondingStudent[0]"))
  #set($objlist = $crtstud.getObjects('Catalog.Code.Course_Class'))
#end
##########################
## The following code is copied form the standard XWiki.LiveTableResults, with only the replacement of gridresultswithfilter with gridresultswithfilterexport at the end, if an export is asked for.
## We should try to avoid copying as much as possible, but for safety we need to export.
##########################
#set ($extra = '')
#set ($params = [])
#if ("$!request.space" != '')
  #set ($extra = "${extra} and doc.space = ?")
  #set ($discard = $params.add($request.space))
#end
#if ("$!request.location" != '')
  #set ($extra = "${extra} and lower(doc.fullName) like lower(?) escape '!'")
  #set ($locationFilterValue = $request.location)
  ## Note: the "_", "[", and the "%" characters have special meanings in standard SQL servers (they behave as wildcards).
  ## However, it is not what the user expects (e.g. http://jira.xwiki.org/browse/XWIKI-12608).
  ## As a consequence, we must escape these characters.
  ## See http://www.jguru.com/faq/view.jsp?EID=8881 to understand why we use the special clause 'escape' above.
  ## Since we use '!' for the escaping, we also double existing ones.
  #set ($locationFilterValue = $locationFilterValue.replaceAll('([\[%_!])', '!$1'))
  ## Because the user might filter with "/" as separator we replace that by "%", because it could be "."
  ## (the space separator) or "/" (as it is in the document name).
  ## In addition, using "%" (any sequence of character) instead of "_" (any single character) gives the ability
  ## to filter on different levels:
  ##   e.g. filtering on "Blog/Intro" will return "Blog.BlogIntroduction".
  ##        On the other hand, it will also returns: "BlogForIntrospection", which might be unexpected.
  #set ($locationFilterValue = $locationFilterValue.replaceAll('/', '%'))
  #set ($discard = $params.add("%${locationFilterValue}%"))
#end
#if ("$!request.parent" != '')
  #set ($extra = "${extra} and doc.parent = ?")
  #set ($discard = $params.add($request.parent))
#end
#if ("$!request.orphaned" == '1')
  #set ($homepage = $services.wiki.getById($services.wiki.currentWikiId).mainPageReference)
  #set ($homepageFullName = $services.model.serialize($homepage, 'local'))
  ## On Oracle the empty parent is actually null.
  #set ($extra = "${extra} and (doc.parent = '' or doc.parent is null) and doc.fullName &lt;&gt; ?")
  #set ($discard = $params.add($homepageFullName))
#end
#if ($request.outputSyntaxType == $EXCEL || $request.outputSyntaxType == $CSV)
  #gridresultwithfilterexport("$!request.classname" $request.collist.split(',') '' "${extra}" $params $request.outputSyntaxType)
#elseif ($request.outputSyntaxType == 'json')
  #gridresultwithfilter("$!request.classname" $request.collist.split(',') '' "${extra}" $params)
#else
  #if("$!{request.xpage}" == 'plain')
    $response.setContentType('application/json')
  #end
  ##==================
  ## Initialize the map that will store the JSON data.
  ##==================
  #set($map = {})
  ##==================
  ## Build the JSON in memory using the previous map
  ##==================
  #gridresult_buildJSON("$!request.classname" $request.collist.split(',') $map)
  ##==================
  ## Modify the JSON data from the map or add new data.
  ##==================
  #addExtraColumns()
  ##==================
  ## Serialize the map in the JSON format.
  ##==================
  $jsontool.serialize($map)
#end
{{/velocity}}</content>
</xwikidoc>
